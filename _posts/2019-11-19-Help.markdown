---
layout: post
title:  "Help on various topics"
date:   2019-11-19 17:49:34
categories: GCP
---

### Objective

## This gist contains help functions/steps for different tasks

1. Using ColumnTransformer
2. Search for available GPUs
3. Steps to handle nan in loss during training
4. Steps to increase gpu utilization and speed of processing
5. Commands to monitor gpu usage
6. Commands to run tensorboard
7. Command to create tar file
8. Command to compute per user memory usage
9. Shell script to compress all files in a directory and delete the originial file from the directory. This script will create separate tar file for each file in the directory
10. Setting up tensorflow environment variables
11. Setting up LD_LIBRARY_PATH variable for tensorflow
12. Some useful steps to setup server for Deep Learning
13. Shell command to check folder wise disk usage
14. Filezilla: Error: Disconnected: No supported authentication methods available (server sent: publickey)

---

**Using ColumnTransformer**
This code demonstrates how to use ColumnTransformer
```python
from sklearn.compose import ColumnTransformer
from sklearn.compose import make_column_transformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
df = pd.DataFrame({'region':['a','a','b','c'], 'country':['c1', 'c1', 'c2', 'c3']})
categorical_features = ['region','country']
preprocessor = make_column_transformer((OneHotEncoder(), categorical_features))
df_new = preprocessor.fit_transform(df)
```
---

**Search for available GPUs**
How to get list of GPUs visible to tensorflow/keras
```
from keras import backend
backend.tensorflow_backend._get_available_gpus()

import keras
import tensorflow as tf
config = tf.ConfigProto( device_count = {'GPU': 1 , 'CPU': 56} ) 
sess = tf.Session(config=config) 
keras.backend.set_session(sess)

from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

import tensorflow as tf
tf.test.is_gpu_available() tells if the gpu is available
tf.test.gpu_device_name returns the name of the gpu device

with tf.Session() as sess:
  devices = sess.list_devices()

```
